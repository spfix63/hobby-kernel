#ifndef KEYBOARD_H#define KEYBOARD_H#include "IDT.h"class KeyEvent;class KeyboardListener{public:	virtual void keyPressed(KeyEvent *);	virtual void keyReleased(KeyEvent *);	virtual void lineEntered(const char *);};class Keyboard{friend class IDT;public:	static void setup();	static bool isPressed(int key);		static void setListener(KeyboardListener *);private:	static char lineBuffer[78];	static int lbLen;		static void setupKeyMap();	static void setPressed(int key, bool pressed);	static void handleKeyboardEvent();	static unsigned char readByte(); //blocking	static void writeByte(unsigned char b); //blocking		static bool KEY_PRESS_TABLE[256]; //whther KeyEvent::VK_ is pressed atm	static int SCANCODE_TO_KEY_TABLE[256]; //translate scancode to KeyEvent::VK_	static KeyboardListener *callback;	//used only in handleKeyboardEvent	static int length;	static bool pressed;	static bool handled;	static int timesToIgnore;	static int key;};#endif